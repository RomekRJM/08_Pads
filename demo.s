;
; File generated by cc65 v 2.19 - Git c3d7a90
;
	.fopt		compiler,"cc65 v 2.19 - Git c3d7a90"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	on
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.dbg		file, "demo.c", 2641, 1643435815
	.dbg		file, "lib/neslib.h", 9271, 1642938971
	.dbg		file, "lib/nesdoug.h", 6862, 1642938971
	.dbg		file, "sprites.h", 732, 1643435437
	.dbg		file, "lungs.h", 744, 1643255373
	.dbg		file, "math.h", 406, 1643431546
	.forceimport	__STARTUP__
	.dbg		sym, "pal_bg", "00", extern, "_pal_bg"
	.dbg		sym, "pal_spr", "00", extern, "_pal_spr"
	.dbg		sym, "ppu_wait_nmi", "00", extern, "_ppu_wait_nmi"
	.dbg		sym, "ppu_off", "00", extern, "_ppu_off"
	.dbg		sym, "ppu_on_all", "00", extern, "_ppu_on_all"
	.dbg		sym, "oam_clear", "00", extern, "_oam_clear"
	.dbg		sym, "oam_meta_spr", "00", extern, "_oam_meta_spr"
	.dbg		sym, "bank_spr", "00", extern, "_bank_spr"
	.dbg		sym, "vram_adr", "00", extern, "_vram_adr"
	.dbg		sym, "vram_unrle", "00", extern, "_vram_unrle"
	.dbg		sym, "get_frame_count", "00", extern, "_get_frame_count"
	.dbg		sym, "virusPath", "00", extern, "_virusPath"
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_bank_spr
	.import		_vram_adr
	.import		_vram_unrle
	.import		_get_frame_count
	.export		_virusSprite0
	.export		_virusSprite1
	.export		_virusSprite2
	.export		_virusSprite3
	.export		_virusSpriteLookup
	.export		_lungs
	.import		_virusPath
	.export		_virusCoordinates
	.export		_initialVirusCoordinates
	.export		_virusSprite
	.export		_virusesInRow
	.export		_y
	.export		_x
	.export		_i
	.export		_initial
	.export		_path
	.export		_sprite
	.export		_dbg1
	.export		_dbg2
	.export		_dbg3
	.export		_paletteBackground
	.export		_paletteSprite
	.export		_initialise_viruses
	.export		_movement
	.export		_draw_sprites
	.export		_init_nes
	.export		_main

.segment	"DATA"

_virusSpriteLookup:
	.addr	_virusSprite0
	.addr	_virusSprite1
	.addr	_virusSprite2
	.addr	_virusSprite3
_virusSprite:
	.byte	$00
_virusesInRow:
	.byte	$00
_y:
	.byte	$78
_x:
	.byte	$36
_dbg1:
	.word	$0080
_dbg2:
	.word	$0081
_dbg3:
	.word	$0082

.segment	"RODATA"

_virusSprite0:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$11
	.byte	$00
	.byte	$80
_virusSprite1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$11
	.byte	$00
	.byte	$80
_virusSprite2:
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$21
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$30
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$31
	.byte	$00
	.byte	$80
_virusSprite3:
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$50
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$51
	.byte	$00
	.byte	$80
_lungs:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$4C
	.byte	$80
	.byte	$81
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$85
	.byte	$86
	.byte	$87
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$90
	.byte	$91
	.byte	$92
	.byte	$93
	.byte	$94
	.byte	$95
	.byte	$96
	.byte	$97
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$A0
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$A5
	.byte	$A6
	.byte	$A7
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$B0
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$C5
	.byte	$C6
	.byte	$C7
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$D0
	.byte	$D1
	.byte	$D2
	.byte	$D3
	.byte	$D4
	.byte	$D5
	.byte	$D6
	.byte	$D7
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$E0
	.byte	$E1
	.byte	$E2
	.byte	$E3
	.byte	$E4
	.byte	$E5
	.byte	$E6
	.byte	$E7
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$BD
	.byte	$A0
	.byte	$01
	.byte	$03
	.byte	$20
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$AA
	.byte	$AA
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$0A
	.byte	$0A
	.byte	$00
	.byte	$01
	.byte	$19
	.byte	$00
	.byte	$01
	.byte	$00
_paletteBackground:
	.byte	$0F
	.byte	$06
	.byte	$16
	.byte	$26
	.byte	$0F
	.byte	$06
	.byte	$16
	.byte	$26
	.byte	$0F
	.byte	$06
	.byte	$16
	.byte	$26
	.byte	$0F
	.byte	$06
	.byte	$16
	.byte	$26
_paletteSprite:
	.byte	$0F
	.byte	$3D
	.byte	$05
	.byte	$17
	.byte	$0F
	.byte	$3D
	.byte	$30
	.byte	$05
	.byte	$0F
	.byte	$3D
	.byte	$30
	.byte	$05
	.byte	$0F
	.byte	$3D
	.byte	$30
	.byte	$05

.segment	"BSS"

.segment	"ZEROPAGE"
_virusCoordinates:
	.res	32,$00
_initialVirusCoordinates:
	.res	32,$00
_i:
	.res	1,$00
_initial:
	.res	1,$00
_path:
	.res	1,$00
_sprite:
	.res	2,$00

; ---------------------------------------------------------------
; void __near__ initialise_viruses (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_initialise_viruses: near

	.dbg	func, "initialise_viruses", "00", extern, "_initialise_viruses"

.segment	"CODE"

;
; for (i = 0; i < NUM_VIRUSES; ++i) {
;
	.dbg	line, "demo.c", 42
	lda     #$00
	sta     _i
L000A:	lda     _i
	cmp     #$10
	bcs     L0003
;
; initialVirusCoordinates.x[i] = x;
;
	.dbg	line, "demo.c", 43
	ldy     _i
	lda     _x
	sta     _initialVirusCoordinates,y
;
; initialVirusCoordinates.y[i] = y;
;
	.dbg	line, "demo.c", 44
	ldy     _i
	lda     _y
	sta     _initialVirusCoordinates+16,y
;
; if (virusesInRow < 3) {
;
	.dbg	line, "demo.c", 46
	lda     _virusesInRow
	cmp     #$03
	bcs     L000B
;
; x += 40;
;
	.dbg	line, "demo.c", 47
	lda     #$28
	clc
	adc     _x
	sta     _x
;
; ++virusesInRow;
;
	.dbg	line, "demo.c", 48
	inc     _virusesInRow
;
; } else {
;
	.dbg	line, "demo.c", 49
	jmp     L000C
;
; x = 54;
;
	.dbg	line, "demo.c", 50
L000B:	lda     #$36
	sta     _x
;
; y += 20;
;
	.dbg	line, "demo.c", 51
	lda     #$14
	clc
	adc     _y
	sta     _y
;
; virusesInRow = 0;
;
	.dbg	line, "demo.c", 52
	lda     #$00
	sta     _virusesInRow
;
; for (i = 0; i < NUM_VIRUSES; ++i) {
;
	.dbg	line, "demo.c", 42
L000C:	inc     _i
	jmp     L000A
;
; }
;
	.dbg	line, "demo.c", 55
L0003:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

	.dbg	func, "movement", "00", extern, "_movement"

.segment	"CODE"

;
; for (i = 0; i < NUM_VIRUSES; ++i) {
;
	.dbg	line, "demo.c", 58
	lda     #$00
	sta     _i
L000C:	lda     _i
	cmp     #$10
	bcs     L0003
;
; path = virusPath.x[get_frame_count()];
;
	.dbg	line, "demo.c", 59
	jsr     _get_frame_count
	sta     ptr1
	txa
	clc
	adc     #>(_virusPath)
	sta     ptr1+1
	ldy     #<(_virusPath)
	lda     (ptr1),y
	sta     _path
;
; initial = initialVirusCoordinates.x[i];
;
	.dbg	line, "demo.c", 60
	ldy     _i
	lda     _initialVirusCoordinates,y
	sta     _initial
;
; virusCoordinates.x[i] = initial + path;
;
	.dbg	line, "demo.c", 61
	lda     #<(_virusCoordinates)
	ldx     #>(_virusCoordinates)
	clc
	adc     _i
	bcc     L0007
	inx
L0007:	sta     ptr1
	stx     ptr1+1
	lda     _initial
	clc
	adc     _path
	ldy     #$00
	sta     (ptr1),y
;
; path = virusPath.y[get_frame_count()];
;
	.dbg	line, "demo.c", 63
	jsr     _get_frame_count
	sta     ptr1
	txa
	clc
	adc     #>(_virusPath+256)
	sta     ptr1+1
	ldy     #<(_virusPath+256)
	lda     (ptr1),y
	sta     _path
;
; initial = initialVirusCoordinates.y[i];
;
	.dbg	line, "demo.c", 64
	ldy     _i
	lda     _initialVirusCoordinates+16,y
	sta     _initial
;
; virusCoordinates.y[i] = initial + path;
;
	.dbg	line, "demo.c", 65
	lda     #<(_virusCoordinates+16)
	ldx     #>(_virusCoordinates+16)
	clc
	adc     _i
	bcc     L0009
	inx
L0009:	sta     ptr1
	stx     ptr1+1
	lda     _initial
	clc
	adc     _path
	ldy     #$00
	sta     (ptr1),y
;
; for (i = 0; i < NUM_VIRUSES; ++i) {
;
	.dbg	line, "demo.c", 58
	inc     _i
	jmp     L000C
;
; }
;
	.dbg	line, "demo.c", 67
L0003:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

	.dbg	func, "draw_sprites", "00", extern, "_draw_sprites"

.segment	"CODE"

;
; oam_clear();
;
	.dbg	line, "demo.c", 70
	jsr     _oam_clear
;
; if ((get_frame_count() & 7) == 0) {
;
	.dbg	line, "demo.c", 72
	jsr     _get_frame_count
	ldx     #$00
	and     #$07
	bne     L000C
;
; virusSprite = ++virusSprite & 3;
;
	.dbg	line, "demo.c", 73
	inc     _virusSprite
	lda     _virusSprite
	and     #$03
	sta     _virusSprite
;
; sprite = virusSpriteLookup[virusSprite];
;
	.dbg	line, "demo.c", 76
L000C:	lda     _virusSprite
	asl     a
	bcc     L000B
	inx
	clc
L000B:	adc     #<(_virusSpriteLookup)
	sta     ptr1
	txa
	adc     #>(_virusSpriteLookup)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _sprite+1
	dey
	lda     (ptr1),y
	sta     _sprite
;
; for (i = 0; i < NUM_VIRUSES; ++i) {
;
	.dbg	line, "demo.c", 78
	sty     _i
L000D:	lda     _i
	cmp     #$10
	bcs     L0005
;
; oam_meta_spr(virusCoordinates.x[i], virusCoordinates.y[i], sprite);
;
	.dbg	line, "demo.c", 79
	jsr     decsp2
	ldy     _i
	lda     _virusCoordinates,y
	ldy     #$01
	sta     (sp),y
	ldy     _i
	lda     _virusCoordinates+16,y
	ldy     #$00
	sta     (sp),y
	lda     _sprite
	ldx     _sprite+1
	jsr     _oam_meta_spr
;
; for (i = 0; i < NUM_VIRUSES; ++i) {
;
	.dbg	line, "demo.c", 78
	inc     _i
	jmp     L000D
;
; }
;
	.dbg	line, "demo.c", 81
L0005:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ init_nes (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_nes: near

	.dbg	func, "init_nes", "00", extern, "_init_nes"

.segment	"CODE"

;
; ppu_off(); // screen off
;
	.dbg	line, "demo.c", 84
	jsr     _ppu_off
;
; pal_bg(paletteBackground);
;
	.dbg	line, "demo.c", 87
	lda     #<(_paletteBackground)
	ldx     #>(_paletteBackground)
	jsr     _pal_bg
;
; pal_spr(paletteSprite);
;
	.dbg	line, "demo.c", 88
	lda     #<(_paletteSprite)
	ldx     #>(_paletteSprite)
	jsr     _pal_spr
;
; bank_spr(1);
;
	.dbg	line, "demo.c", 92
	lda     #$01
	jsr     _bank_spr
;
; vram_adr(NAMETABLE_A);
;
	.dbg	line, "demo.c", 94
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(lungs);
;
	.dbg	line, "demo.c", 96
	lda     #<(_lungs)
	ldx     #>(_lungs)
	jsr     _vram_unrle
;
; ppu_on_all();
;
	.dbg	line, "demo.c", 99
	jmp     _ppu_on_all

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

	.dbg	func, "main", "00", extern, "_main"

.segment	"CODE"

;
; init_nes();
;
	.dbg	line, "demo.c", 103
	jsr     _init_nes
;
; initialise_viruses();
;
	.dbg	line, "demo.c", 105
	jsr     _initialise_viruses
;
; movement();
;
	.dbg	line, "demo.c", 108
L0002:	jsr     _movement
;
; draw_sprites();
;
	.dbg	line, "demo.c", 109
	jsr     _draw_sprites
;
; ppu_wait_nmi();
;
	.dbg	line, "demo.c", 111
	jsr     _ppu_wait_nmi
;
; while (1) {
;
	.dbg	line, "demo.c", 107
	jmp     L0002

	.dbg	line
.endproc

