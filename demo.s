;
; File generated by cc65 v 2.19 - Git c3d7a90
;
	.fopt		compiler,"cc65 v 2.19 - Git c3d7a90"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	on
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.dbg		file, "demo.c", 3041, 1643381927
	.dbg		file, "lib/neslib.h", 9271, 1642938971
	.dbg		file, "lib/nesdoug.h", 6862, 1642938971
	.dbg		file, "sprites.h", 616, 1643251043
	.dbg		file, "lungs.h", 744, 1643255373
	.dbg		file, "math.h", 207, 1643382121
	.forceimport	__STARTUP__
	.dbg		sym, "pal_bg", "00", extern, "_pal_bg"
	.dbg		sym, "pal_spr", "00", extern, "_pal_spr"
	.dbg		sym, "ppu_wait_nmi", "00", extern, "_ppu_wait_nmi"
	.dbg		sym, "ppu_off", "00", extern, "_ppu_off"
	.dbg		sym, "ppu_on_all", "00", extern, "_ppu_on_all"
	.dbg		sym, "oam_clear", "00", extern, "_oam_clear"
	.dbg		sym, "oam_meta_spr", "00", extern, "_oam_meta_spr"
	.dbg		sym, "bank_spr", "00", extern, "_bank_spr"
	.dbg		sym, "vram_adr", "00", extern, "_vram_adr"
	.dbg		sym, "vram_unrle", "00", extern, "_vram_unrle"
	.dbg		sym, "get_frame_count", "00", extern, "_get_frame_count"
	.dbg		sym, "virusPath", "00", extern, "_virusPath"
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_bank_spr
	.import		_vram_adr
	.import		_vram_unrle
	.import		_get_frame_count
	.export		_virusSprite0
	.export		_virusSprite1
	.export		_virusSprite2
	.export		_virusSprite3
	.export		_lungs
	.import		_virusPath
	.export		_virusCoordinates
	.export		_initialVirusCoordinates
	.export		_dbg1
	.export		_dbg2
	.export		_dbg3
	.export		_paletteBackground
	.export		_paletteSprite
	.export		_initialise_viruses
	.export		_movement
	.export		_draw_sprites
	.export		_init_nes
	.export		_main

.segment	"DATA"

_dbg1:
	.word	$0080
_dbg2:
	.word	$0081
_dbg3:
	.word	$0082

.segment	"RODATA"

_virusSprite0:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$11
	.byte	$00
	.byte	$80
_virusSprite1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$11
	.byte	$00
	.byte	$80
_virusSprite2:
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$21
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$30
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$31
	.byte	$00
	.byte	$80
_virusSprite3:
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$50
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$51
	.byte	$00
	.byte	$80
_lungs:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$4C
	.byte	$80
	.byte	$81
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$85
	.byte	$86
	.byte	$87
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$90
	.byte	$91
	.byte	$92
	.byte	$93
	.byte	$94
	.byte	$95
	.byte	$96
	.byte	$97
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$A0
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$A5
	.byte	$A6
	.byte	$A7
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$B0
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$C5
	.byte	$C6
	.byte	$C7
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$D0
	.byte	$D1
	.byte	$D2
	.byte	$D3
	.byte	$D4
	.byte	$D5
	.byte	$D6
	.byte	$D7
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$E0
	.byte	$E1
	.byte	$E2
	.byte	$E3
	.byte	$E4
	.byte	$E5
	.byte	$E6
	.byte	$E7
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$BD
	.byte	$A0
	.byte	$01
	.byte	$03
	.byte	$20
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$AA
	.byte	$AA
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$0A
	.byte	$0A
	.byte	$00
	.byte	$01
	.byte	$19
	.byte	$00
	.byte	$01
	.byte	$00
_paletteBackground:
	.byte	$0F
	.byte	$06
	.byte	$16
	.byte	$26
	.byte	$0F
	.byte	$06
	.byte	$16
	.byte	$26
	.byte	$0F
	.byte	$06
	.byte	$16
	.byte	$26
	.byte	$0F
	.byte	$06
	.byte	$16
	.byte	$26
_paletteSprite:
	.byte	$0F
	.byte	$3D
	.byte	$05
	.byte	$17
	.byte	$0F
	.byte	$3D
	.byte	$30
	.byte	$05
	.byte	$0F
	.byte	$3D
	.byte	$30
	.byte	$05
	.byte	$0F
	.byte	$3D
	.byte	$30
	.byte	$05

.segment	"BSS"

.segment	"ZEROPAGE"
_virusCoordinates:
	.res	32,$00
_initialVirusCoordinates:
	.res	32,$00

; ---------------------------------------------------------------
; void __near__ initialise_viruses (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_initialise_viruses: near

	.dbg	func, "initialise_viruses", "00", extern, "_initialise_viruses"
	.dbg	sym, "i", "00", auto, -1
	.dbg	sym, "virusesInRow", "00", auto, -2
	.dbg	sym, "y", "00", auto, -3
	.dbg	sym, "x", "00", auto, -4

.segment	"CODE"

;
; unsigned char virusesInRow = 0;
;
	.dbg	line, "demo.c", 37
	jsr     decsp1
	lda     #$00
	jsr     pusha
;
; unsigned char y = 120;
;
	.dbg	line, "demo.c", 38
	lda     #$78
	jsr     pusha
;
; unsigned char x = 54;
;
	.dbg	line, "demo.c", 39
	lda     #$36
	jsr     pusha
;
; for (i = 0; i < NUM_VIRUSES; ++i) {
;
	.dbg	line, "demo.c", 41
	lda     #$00
	ldy     #$03
L000B:	sta     (sp),y
	cmp     #$10
	bcs     L0003
;
; initialVirusCoordinates[i].x = x;
;
	.dbg	line, "demo.c", 42
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L000C
	inx
	clc
L000C:	adc     #<(_initialVirusCoordinates)
	sta     ptr1
	txa
	adc     #>(_initialVirusCoordinates)
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	sta     (ptr1),y
;
; initialVirusCoordinates[i].y = y;
;
	.dbg	line, "demo.c", 43
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L000D
	inx
	clc
L000D:	adc     #<(_initialVirusCoordinates)
	sta     ptr1
	txa
	adc     #>(_initialVirusCoordinates)
	sta     ptr1+1
	ldy     #$01
	lda     (sp),y
	sta     (ptr1),y
;
; if (virusesInRow < 3) {
;
	.dbg	line, "demo.c", 45
	iny
	lda     (sp),y
	cmp     #$03
	bcs     L000E
;
; x += 40;
;
	.dbg	line, "demo.c", 46
	ldy     #$00
	clc
	lda     #$28
	adc     (sp),y
	sta     (sp),y
;
; ++virusesInRow;
;
	.dbg	line, "demo.c", 47
	ldy     #$02
	clc
	lda     #$01
	adc     (sp),y
;
; } else {
;
	.dbg	line, "demo.c", 48
	jmp     L000A
;
; x = 54;
;
	.dbg	line, "demo.c", 49
L000E:	lda     #$36
	ldy     #$00
	sta     (sp),y
;
; y += 20;
;
	.dbg	line, "demo.c", 50
	iny
	clc
	lda     #$14
	adc     (sp),y
	sta     (sp),y
;
; virusesInRow = 0;
;
	.dbg	line, "demo.c", 51
	lda     #$00
	iny
L000A:	sta     (sp),y
;
; for (i = 0; i < NUM_VIRUSES; ++i) {
;
	.dbg	line, "demo.c", 41
	iny
	clc
	lda     #$01
	adc     (sp),y
	jmp     L000B
;
; }
;
	.dbg	line, "demo.c", 54
L0003:	jmp     incsp4

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

	.dbg	func, "movement", "00", extern, "_movement"
	.dbg	sym, "i", "00", auto, -1

.segment	"CODE"

;
; for (i = 0; i < NUM_VIRUSES; ++i) {
;
	.dbg	line, "demo.c", 59
	jsr     decsp1
	lda     #$00
	tay
L000A:	sta     (sp),y
	cmp     #$10
	jcs     L0003
;
; virusCoordinates[i].x = initialVirusCoordinates[i].x + virusPath[get_frame_count()].x;
;
	.dbg	line, "demo.c", 60
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L000B
	inx
	clc
L000B:	adc     #<(_virusCoordinates)
	tay
	txa
	adc     #>(_virusCoordinates)
	tax
	tya
	jsr     pushax
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L0007
	inx
L0007:	sta     ptr1
	txa
	clc
	adc     #>(_initialVirusCoordinates)
	sta     ptr1+1
	ldy     #<(_initialVirusCoordinates)
	lda     (ptr1),y
	jsr     pusha0
	jsr     _get_frame_count
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     tmp1
	clc
	adc     #>(_virusPath)
	sta     ptr1+1
	ldy     #<(_virusPath)
	lda     (ptr1),y
	jsr     tosadda0
	ldy     #$00
	jsr     staspidx
;
; virusCoordinates[i].y = initialVirusCoordinates[i].y + virusPath[get_frame_count()].y;
;
	.dbg	line, "demo.c", 61
	ldx     #$00
	lda     (sp,x)
	asl     a
	bcc     L000C
	inx
	clc
L000C:	adc     #<(_virusCoordinates)
	tay
	txa
	adc     #>(_virusCoordinates)
	tax
	tya
	jsr     pushax
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L000D
	inx
	clc
L000D:	adc     #<(_initialVirusCoordinates)
	sta     ptr1
	txa
	adc     #>(_initialVirusCoordinates)
	sta     ptr1+1
	dey
	lda     (ptr1),y
	jsr     pusha0
	jsr     _get_frame_count
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_virusPath)
	sta     ptr1
	lda     tmp1
	adc     #>(_virusPath)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     tosadda0
	ldy     #$01
	jsr     staspidx
;
; for (i = 0; i < NUM_VIRUSES; ++i) {
;
	.dbg	line, "demo.c", 59
	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	jmp     L000A
;
; }
;
	.dbg	line, "demo.c", 63
L0003:	jmp     incsp1

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

	.dbg	func, "draw_sprites", "00", extern, "_draw_sprites"
	.dbg	sym, "i", "00", auto, -1

.segment	"CODE"

;
; oam_clear();
;
	.dbg	line, "demo.c", 68
	jsr     decsp1
	jsr     _oam_clear
;
; if (get_frame_count() % 8 == 0) {
;
	.dbg	line, "demo.c", 70
	jsr     _get_frame_count
	and     #$07
	bne     L001C
;
; virusSprite = ++virusSprite % 4;
;
	.dbg	line, "demo.c", 71
	inc     M0001
	lda     M0001
	and     #$03
	sta     M0001
;
; for (i = 0; i < NUM_VIRUSES; ++i) {
;
	.dbg	line, "demo.c", 74
L001C:	lda     #$00
	tay
L0017:	sta     (sp),y
	cmp     #$10
	jcs     L0005
;
; switch (virusSprite) {
;
	.dbg	line, "demo.c", 75
	lda     M0001
;
; }
;
	.dbg	line, "demo.c", 88
	beq     L000A
	cmp     #$01
	beq     L000B
	cmp     #$02
	jeq     L000C
	cmp     #$03
	jeq     L000D
	jmp     L001E
;
; oam_meta_spr(virusCoordinates[i].x, virusCoordinates[i].y, virusSprite0);
;
	.dbg	line, "demo.c", 77
L000A:	jsr     decsp2
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L000E
	inx
L000E:	sta     ptr1
	txa
	clc
	adc     #>(_virusCoordinates)
	sta     ptr1+1
	ldy     #<(_virusCoordinates)
	lda     (ptr1),y
	ldy     #$01
	sta     (sp),y
	iny
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L0018
	inx
	clc
L0018:	adc     #<(_virusCoordinates)
	sta     ptr1
	txa
	adc     #>(_virusCoordinates)
	sta     ptr1+1
	dey
	lda     (ptr1),y
	dey
	sta     (sp),y
	lda     #<(_virusSprite0)
	ldx     #>(_virusSprite0)
;
; break;
;
	.dbg	line, "demo.c", 78
	jmp     L0016
;
; oam_meta_spr(virusCoordinates[i].x, virusCoordinates[i].y, virusSprite1);
;
	.dbg	line, "demo.c", 80
L000B:	jsr     decsp2
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L0010
	inx
L0010:	sta     ptr1
	txa
	clc
	adc     #>(_virusCoordinates)
	sta     ptr1+1
	ldy     #<(_virusCoordinates)
	lda     (ptr1),y
	ldy     #$01
	sta     (sp),y
	iny
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L0019
	inx
	clc
L0019:	adc     #<(_virusCoordinates)
	sta     ptr1
	txa
	adc     #>(_virusCoordinates)
	sta     ptr1+1
	dey
	lda     (ptr1),y
	dey
	sta     (sp),y
	lda     #<(_virusSprite1)
	ldx     #>(_virusSprite1)
;
; break;
;
	.dbg	line, "demo.c", 81
	jmp     L0016
;
; oam_meta_spr(virusCoordinates[i].x, virusCoordinates[i].y, virusSprite2);
;
	.dbg	line, "demo.c", 83
L000C:	jsr     decsp2
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L0012
	inx
L0012:	sta     ptr1
	txa
	clc
	adc     #>(_virusCoordinates)
	sta     ptr1+1
	ldy     #<(_virusCoordinates)
	lda     (ptr1),y
	ldy     #$01
	sta     (sp),y
	iny
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L001A
	inx
	clc
L001A:	adc     #<(_virusCoordinates)
	sta     ptr1
	txa
	adc     #>(_virusCoordinates)
	sta     ptr1+1
	dey
	lda     (ptr1),y
	dey
	sta     (sp),y
	lda     #<(_virusSprite2)
	ldx     #>(_virusSprite2)
;
; break;
;
	.dbg	line, "demo.c", 84
	jmp     L0016
;
; oam_meta_spr(virusCoordinates[i].x, virusCoordinates[i].y, virusSprite3);
;
	.dbg	line, "demo.c", 86
L000D:	jsr     decsp2
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L0014
	inx
L0014:	sta     ptr1
	txa
	clc
	adc     #>(_virusCoordinates)
	sta     ptr1+1
	ldy     #<(_virusCoordinates)
	lda     (ptr1),y
	ldy     #$01
	sta     (sp),y
	iny
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L001B
	inx
	clc
L001B:	adc     #<(_virusCoordinates)
	sta     ptr1
	txa
	adc     #>(_virusCoordinates)
	sta     ptr1+1
	dey
	lda     (ptr1),y
	dey
	sta     (sp),y
	lda     #<(_virusSprite3)
	ldx     #>(_virusSprite3)
L0016:	jsr     _oam_meta_spr
;
; for (i = 0; i < NUM_VIRUSES; ++i) {
;
	.dbg	line, "demo.c", 74
	ldy     #$00
L001E:	clc
	lda     #$01
	adc     (sp),y
	jmp     L0017
;
; }
;
	.dbg	line, "demo.c", 90
L0005:	jmp     incsp1

	.dbg	line
.segment	"DATA"

M0001:
	.byte	$00

.endproc

; ---------------------------------------------------------------
; void __near__ init_nes (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_nes: near

	.dbg	func, "init_nes", "00", extern, "_init_nes"

.segment	"CODE"

;
; ppu_off(); // screen off
;
	.dbg	line, "demo.c", 93
	jsr     _ppu_off
;
; pal_bg(paletteBackground);
;
	.dbg	line, "demo.c", 96
	lda     #<(_paletteBackground)
	ldx     #>(_paletteBackground)
	jsr     _pal_bg
;
; pal_spr(paletteSprite);
;
	.dbg	line, "demo.c", 97
	lda     #<(_paletteSprite)
	ldx     #>(_paletteSprite)
	jsr     _pal_spr
;
; bank_spr(1);
;
	.dbg	line, "demo.c", 101
	lda     #$01
	jsr     _bank_spr
;
; vram_adr(NAMETABLE_A);
;
	.dbg	line, "demo.c", 103
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(lungs);
;
	.dbg	line, "demo.c", 105
	lda     #<(_lungs)
	ldx     #>(_lungs)
	jsr     _vram_unrle
;
; ppu_on_all();
;
	.dbg	line, "demo.c", 108
	jmp     _ppu_on_all

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

	.dbg	func, "main", "00", extern, "_main"

.segment	"CODE"

;
; init_nes();
;
	.dbg	line, "demo.c", 112
	jsr     _init_nes
;
; initialise_viruses();
;
	.dbg	line, "demo.c", 114
	jsr     _initialise_viruses
;
; movement();
;
	.dbg	line, "demo.c", 117
L0002:	jsr     _movement
;
; draw_sprites();
;
	.dbg	line, "demo.c", 118
	jsr     _draw_sprites
;
; ppu_wait_nmi();
;
	.dbg	line, "demo.c", 120
	jsr     _ppu_wait_nmi
;
; while (1) {
;
	.dbg	line, "demo.c", 116
	jmp     L0002

	.dbg	line
.endproc

