;
; File generated by cc65 v 2.16 - Ubuntu 2.16-2
;
	.fopt		compiler,"cc65 v 2.16 - Ubuntu 2.16-2"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_col
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_pad_state
	.import		_bank_spr
	.import		_vram_adr
	.import		_vram_write
	.import		_get_frame_count
	.import		_check_collision
	.export		_YellowSpr
	.export		_FistSpr
	.export		_BlueSpr
	.export		_pad1
	.export		_pad1_trigger
	.export		_pad2
	.export		_collision
	.export		_boxGuyCounter
	.export		_boxGuyShowFist
	.export		_playerMoves
	.export		_movesList
	.export		_airSequence
	.export		_status
	.export		_BoxGuy1
	.export		_BoxGuy1Fist
	.export		_BoxGuy2
	.export		_dbg1
	.export		_dbg2
	.export		_dbg3
	.export		_box_2_guy_x
	.export		_box_2_guy_y
	.export		_text
	.export		_palette_bg
	.export		_palette_sp
	.export		_draw_sprites
	.export		_movement
	.export		_test_collision
	.export		_add_move
	.export		_get_move
	.export		_main

.segment	"DATA"

_boxGuyCounter:
	.byte	$00
_boxGuyShowFist:
	.byte	$00
_playerMoves:
	.word	$0000
	.byte	$00
	.word	$0000
	.byte	$00
	.word	$0000
	.byte	$00
	.word	$0000
	.byte	$00
	.word	$0000
	.byte	$00
	.word	$0000
	.byte	$00
	.word	$0000
	.byte	$00
	.res	3,$00
_movesList:
	.byte	$04
	.byte	$01
	.byte	$80
	.byte	$00
	.byte	$05
	.byte	$09
	.byte	$00
	.byte	$03
	.byte	$0A
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$02
_airSequence:
	.byte	$FB
	.byte	$FC
	.byte	$FD
	.byte	$FE
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$05
_BoxGuy1:
	.byte	$14
	.byte	$B4
	.byte	$0F
	.byte	$0F
	.res	2,$00
_BoxGuy1Fist:
	.byte	$24
	.byte	$14
	.byte	$07
	.byte	$07
	.res	2,$00
_BoxGuy2:
	.byte	$46
	.byte	$14
	.byte	$0F
	.byte	$0F
	.res	2,$00
_dbg1:
	.word	$0080
_dbg2:
	.word	$0081
_dbg3:
	.word	$0082

.segment	"RODATA"

_YellowSpr:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$10
	.byte	$40
	.byte	$80
_FistSpr:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$80
_BlueSpr:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$10
	.byte	$41
	.byte	$80
_box_2_guy_x:
	.byte	$14
	.byte	$16
	.byte	$18
	.byte	$1A
	.byte	$18
	.byte	$16
_box_2_guy_y:
	.byte	$0E
	.byte	$10
	.byte	$0E
	.byte	$0C
	.byte	$0A
	.byte	$08
_text:
	.byte	$53,$70,$72,$69,$74,$65,$20,$43,$6F,$6C,$6C,$69,$73,$69,$6F,$6E
	.byte	$73,$00
_palette_bg:
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_palette_sp:
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$28
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$12
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00

.segment	"BSS"

.segment	"ZEROPAGE"
.segment	"BSS"
.segment	"ZEROPAGE"
_pad1:
	.res	1,$00
.segment	"ZEROPAGE"
_pad1_trigger:
	.res	1,$00
.segment	"ZEROPAGE"
_pad2:
	.res	1,$00
.segment	"ZEROPAGE"
_collision:
	.res	1,$00
.segment	"BSS"
_status:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; oam_meta_spr(BoxGuy1.x, BoxGuy1.y, YellowSpr);
;
	jsr     decsp2
	lda     _BoxGuy1
	ldy     #$01
	sta     (sp),y
	lda     _BoxGuy1+1
	dey
	sta     (sp),y
	lda     #<(_YellowSpr)
	ldx     #>(_YellowSpr)
	jsr     _oam_meta_spr
;
; oam_meta_spr(BoxGuy2.x, BoxGuy2.y, BlueSpr);
;
	jsr     decsp2
	lda     _BoxGuy2
	ldy     #$01
	sta     (sp),y
	lda     _BoxGuy2+1
	dey
	sta     (sp),y
	lda     #<(_BlueSpr)
	ldx     #>(_BlueSpr)
	jsr     _oam_meta_spr
;
; if (boxGuyShowFist) {
;
	lda     _boxGuyShowFist
	beq     L0108
;
; oam_meta_spr(BoxGuy1Fist.x, BoxGuy1Fist.y, FistSpr);
;
	jsr     decsp2
	lda     _BoxGuy1Fist
	ldy     #$01
	sta     (sp),y
	lda     _BoxGuy1Fist+1
	dey
	sta     (sp),y
	lda     #<(_FistSpr)
	ldx     #>(_FistSpr)
	jmp     _oam_meta_spr
;
; }
;
L0108:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

.segment	"CODE"

;
; unsigned char move = get_move(playerMoves, movesList);
;
	lda     #<(_playerMoves)
	ldx     #>(_playerMoves)
	jsr     pushax
	lda     #<(_movesList)
	ldx     #>(_movesList)
	jsr     _get_move
	jsr     pusha
;
; boxGuyShowFist = 0;
;
	lda     #$00
	sta     _boxGuyShowFist
;
; switch (move) {
;
	tay
	lda     (sp),y
;
; }
;
	beq     L015D
	cmp     #$01
	beq     L015E
	cmp     #$02
	beq     L015C
	cmp     #$05
	beq     L015F
	jmp     L0116
;
; BoxGuy1.status |= JUMPS;
;
L015C:	lda     _BoxGuy1+4
	ora     #$01
	sta     _BoxGuy1+4
;
; break;
;
	jmp     L0116
;
; BoxGuy1.x -= 2;
;
L015D:	lda     _BoxGuy1
	sec
	sbc     #$02
	sta     _BoxGuy1
;
; break;
;
	jmp     L0116
;
; BoxGuy1.x += 2;
;
L015E:	lda     #$02
	clc
	adc     _BoxGuy1
	sta     _BoxGuy1
;
; break;
;
	jmp     L0116
;
; boxGuyShowFist = 1;
;
L015F:	lda     #$01
	sta     _boxGuyShowFist
;
; BoxGuy1Fist.x = BoxGuy1.x + 16;
;
	lda     _BoxGuy1
	clc
	adc     #$10
	sta     _BoxGuy1Fist
;
; BoxGuy1Fist.y = BoxGuy1.y;
;
	lda     _BoxGuy1+1
	sta     _BoxGuy1Fist+1
;
; *dbg3 = status;
;
L0116:	lda     _dbg3
	sta     ptr1
	lda     _dbg3+1
	sta     ptr1+1
	lda     _status
	sta     (ptr1),y
	iny
	lda     #$00
	sta     (ptr1),y
;
; if (BoxGuy1.status & JUMPS) {
;
	lda     _BoxGuy1+4
	and     #$01
	beq     L0136
;
; BoxGuy1.y += airSequence[BoxGuy1.airSequence];
;
	ldy     _BoxGuy1+5
	lda     _airSequence,y
	clc
	adc     _BoxGuy1+1
	sta     _BoxGuy1+1
;
; ++BoxGuy1.airSequence;
;
	inc     _BoxGuy1+5
;
; if (BoxGuy1.airSequence >= AIR_SEQUENCE_LENGTH) {
;
	lda     _BoxGuy1+5
	cmp     #$0B
	bcc     L0136
;
; BoxGuy1.airSequence = 0;
;
	lda     #$00
	sta     _BoxGuy1+5
;
; BoxGuy1.status &= ~JUMPS;
;
	lda     _BoxGuy1+4
	and     #$FE
	sta     _BoxGuy1+4
;
; *dbg1 = BoxGuy1.airSequence;
;
L0136:	lda     _dbg1
	sta     ptr1
	lda     _dbg1+1
	sta     ptr1+1
	lda     _BoxGuy1+5
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #$00
	sta     (ptr1),y
;
; *dbg2 = BoxGuy1.y;
;
	lda     _dbg2
	sta     ptr1
	lda     _dbg2+1
	sta     ptr1+1
	lda     _BoxGuy1+1
	dey
	sta     (ptr1),y
	iny
	lda     #$00
	sta     (ptr1),y
;
; BoxGuy2.x = box_2_guy_x[boxGuyCounter];
;
	ldy     _boxGuyCounter
	lda     _box_2_guy_x,y
	sta     _BoxGuy2
;
; BoxGuy2.y = box_2_guy_y[boxGuyCounter];
;
	ldy     _boxGuyCounter
	lda     _box_2_guy_y,y
	sta     _BoxGuy2+1
;
; boxGuyCounter = boxGuyCounter >= 5 ? 0 : ++boxGuyCounter;
;
	lda     _boxGuyCounter
	cmp     #$05
	bcc     L0160
	lda     #$00
	jmp     L0161
L0160:	inc     _boxGuyCounter
	lda     _boxGuyCounter
L0161:	sta     _boxGuyCounter
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ test_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_test_collision: near

.segment	"CODE"

;
; collision = check_collision(&BoxGuy1, &BoxGuy2);
;
	lda     #<(_BoxGuy1)
	ldx     #>(_BoxGuy1)
	jsr     pushax
	lda     #<(_BoxGuy2)
	ldx     #>(_BoxGuy2)
	jsr     _check_collision
	sta     _collision
;
; if (collision) {
;
	lda     _collision
	beq     L0162
;
; pal_col(0, 0x30);
;
	lda     #$00
	jsr     pusha
	lda     #$30
	jmp     _pal_col
;
; pal_col(0, 0x00);
;
L0162:	jsr     pusha
	jmp     _pal_col

.endproc

; ---------------------------------------------------------------
; void __near__ add_move (unsigned char, __near__ struct PlayerMove *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_move: near

.segment	"CODE"

;
; void add_move(unsigned char pad, struct PlayerMove *moves) {
;
	jsr     pushax
;
; for (i = PLAYER_MOVE_LENGTH - 1; i > 0; --i) {
;
	jsr     decsp1
	lda     #$07
	ldy     #$00
L0163:	sta     (sp),y
	lda     (sp),y
	beq     L00BF
;
; moves[i] = moves[i - 1];
;
	ldy     #$04
	jsr     pushwysp
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     mulax3
	jsr     tosaddax
	jsr     pushax
	ldy     #$06
	jsr     pushwysp
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	sec
	sbc     #$01
	bcs     L00CA
	dex
L00CA:	jsr     mulax3
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     #$03
	jsr     _memcpy
;
; for (i = PLAYER_MOVE_LENGTH - 1; i > 0; --i) {
;
	ldy     #$00
	lda     (sp),y
	sec
	sbc     #$01
	jmp     L0163
;
; moves[0].atFrame = get_frame_count();
;
L00BF:	ldy     #$04
	jsr     pushwysp
	jsr     _get_frame_count
	ldx     #$00
	ldy     #$00
	jsr     staxspidx
;
; moves[0].padState = pad;
;
	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (sp),y
	dey
	sta     (ptr1),y
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ get_move (__near__ struct PlayerMove *, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_move: near

.segment	"CODE"

;
; unsigned char get_move(struct PlayerMove *playerMoves, unsigned char *movesList) {
;
	jsr     pushax
;
; unsigned char foundMove = HOLD_POSITION;
;
	jsr     decsp4
	lda     #$FF
	jsr     pusha
;
; for (j = 0; j < MOVES_LIST_LENGTH - 1; ++j) {
;
	lda     #$00
	ldy     #$03
L0166:	sta     (sp),y
	cmp     #$13
	jcs     L00D4
;
; moveMatch = 0;
;
	lda     #$00
	ldy     #$01
	sta     (sp),y
;
; for (i = 0; i < PLAYER_MOVE_LENGTH; ++i) {
;
	ldy     #$04
L0165:	sta     (sp),y
	cmp     #$08
	jcs     L00D5
;
; k = i + j;
;
	dey
	lda     (sp),y
	clc
	iny
	adc     (sp),y
	ldy     #$02
	sta     (sp),y
;
; if (k > MOVES_LIST_LENGTH - 1) {
;
	cmp     #$14
	bcc     L00E7
;
; moveMatch = 0;
;
	lda     #$00
	dey
	sta     (sp),y
;
; break;
;
	jmp     L00D5
;
; if (movesList[i] == NULL) {
;
L00E7:	ldy     #$06
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
	bne     L00EE
;
; if (moveMatch) {
;
	ldy     #$01
	lda     (sp),y
	beq     L00EE
;
; foundMove = movesList[i + 1];
;
	ldx     #$00
	ldy     #$04
	lda     (sp),y
	clc
	adc     #$01
	bcc     L0167
	inx
	clc
L0167:	iny
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     (sp),y
;
; break;
;
	jmp     L00D5
;
; if (playerMoves[i].padState == movesList[k]) {
;
L00EE:	ldy     #$0A
	jsr     pushwysp
	ldy     #$06
	ldx     #$00
	lda     (sp),y
	jsr     mulax3
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	jsr     pusha0
	ldy     #$08
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$04
	lda     (sp),y
	tay
	lda     (ptr1),y
	jsr     tosicmp0
	bne     L00F4
;
; moveMatch = 1;
;
	lda     #$01
	tay
	sta     (sp),y
;
; } else {
;
	jmp     L00DF
;
; moveMatch = 0;
;
L00F4:	lda     #$00
	ldy     #$01
	sta     (sp),y
;
; break;
;
	jmp     L00D5
;
; for (i = 0; i < PLAYER_MOVE_LENGTH; ++i) {
;
L00DF:	ldy     #$04
	clc
	adc     (sp),y
	jmp     L0165
;
; for (j = 0; j < MOVES_LIST_LENGTH - 1; ++j) {
;
L00D5:	ldy     #$03
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0166
;
; return foundMove;
;
L00D4:	ldx     #$00
	lda     (sp,x)
;
; }
;
	ldy     #$09
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(palette_bg);
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; vram_adr(NTADR_A(7, 14)); // set a start position for the text
;
	ldx     #$21
	lda     #$C7
	jsr     _vram_adr
;
; vram_write(text, sizeof(text));
;
	lda     #<(_text)
	ldx     #>(_text)
	jsr     pushax
	ldx     #$00
	lda     #$12
	jsr     _vram_write
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
L00AC:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_trigger = pad_state(0);
;
	lda     #$00
	jsr     _pad_state
	sta     _pad1_trigger
;
; add_move(pad1, playerMoves);
;
	lda     _pad1
	jsr     pusha
	lda     #<(_playerMoves)
	ldx     #>(_playerMoves)
	jsr     _add_move
;
; movement();
;
	jsr     _movement
;
; test_collision();
;
	jsr     _test_collision
;
; draw_sprites();
;
	jsr     _draw_sprites
;
; while (1) {
;
	jmp     L00AC

.endproc

