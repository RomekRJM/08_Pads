;
; File generated by cc65 v 2.16 - Ubuntu 2.16-2
;
	.fopt		compiler,"cc65 v 2.16 - Ubuntu 2.16-2"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_col
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_bank_spr
	.import		_vram_adr
	.import		_vram_write
	.import		_check_collision
	.export		_YellowSpr
	.export		_BlueSpr
	.export		_pad1
	.export		_pad2
	.export		_collision
	.export		_boxGuyCounter
	.export		_BoxGuy1
	.export		_BoxGuy2
	.export		_box_2_guy_x
	.export		_box_2_guy_y
	.export		_text
	.export		_palette_bg
	.export		_palette_sp
	.export		_draw_sprites
	.export		_movement
	.export		_test_collision
	.export		_main

.segment	"DATA"

_boxGuyCounter:
	.byte	$00
_BoxGuy1:
	.byte	$14
	.byte	$14
	.byte	$0F
	.byte	$0F
_BoxGuy2:
	.byte	$46
	.byte	$14
	.byte	$0F
	.byte	$0F

.segment	"RODATA"

_YellowSpr:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$10
	.byte	$40
	.byte	$80
_BlueSpr:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$10
	.byte	$41
	.byte	$80
_box_2_guy_x:
	.byte	$14
	.byte	$16
	.byte	$18
	.byte	$1A
	.byte	$18
	.byte	$16
_box_2_guy_y:
	.byte	$0E
	.byte	$10
	.byte	$0E
	.byte	$0C
	.byte	$0A
	.byte	$08
_text:
	.byte	$53,$70,$72,$69,$74,$65,$20,$43,$6F,$6C,$6C,$69,$73,$69,$6F,$6E
	.byte	$73,$00
_palette_bg:
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_palette_sp:
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$28
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$12
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00

.segment	"BSS"

.segment	"ZEROPAGE"
.segment	"BSS"
.segment	"ZEROPAGE"
_pad1:
	.res	1,$00
.segment	"ZEROPAGE"
_pad2:
	.res	1,$00
.segment	"ZEROPAGE"
_collision:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; oam_meta_spr(BoxGuy1.x, BoxGuy1.y, YellowSpr);
;
	jsr     decsp2
	lda     _BoxGuy1
	ldy     #$01
	sta     (sp),y
	lda     _BoxGuy1+1
	dey
	sta     (sp),y
	lda     #<(_YellowSpr)
	ldx     #>(_YellowSpr)
	jsr     _oam_meta_spr
;
; oam_meta_spr(BoxGuy2.x, BoxGuy2.y, BlueSpr);
;
	jsr     decsp2
	lda     _BoxGuy2
	ldy     #$01
	sta     (sp),y
	lda     _BoxGuy2+1
	dey
	sta     (sp),y
	lda     #<(_BlueSpr)
	ldx     #>(_BlueSpr)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

.segment	"CODE"

;
; if (pad1 & PAD_LEFT) {
;
	lda     _pad1
	and     #$02
	beq     L00B5
;
; BoxGuy1.x -= 1;
;
	dec     _BoxGuy1
;
; } else if (pad1 & PAD_RIGHT) {
;
	jmp     L00B6
L00B5:	lda     _pad1
	and     #$01
	beq     L00B6
;
; BoxGuy1.x += 1;
;
	inc     _BoxGuy1
;
; if (pad1 & PAD_UP) {
;
L00B6:	lda     _pad1
	and     #$08
	beq     L00B7
;
; BoxGuy1.y -= 1;
;
	dec     _BoxGuy1+1
;
; } else if (pad1 & PAD_DOWN) {
;
	jmp     L0092
L00B7:	lda     _pad1
	and     #$04
	beq     L0092
;
; BoxGuy1.y += 1;
;
	inc     _BoxGuy1+1
;
; BoxGuy2.x = box_2_guy_x[boxGuyCounter];
;
L0092:	ldy     _boxGuyCounter
	lda     _box_2_guy_x,y
	sta     _BoxGuy2
;
; BoxGuy2.y = box_2_guy_y[boxGuyCounter];
;
	ldy     _boxGuyCounter
	lda     _box_2_guy_y,y
	sta     _BoxGuy2+1
;
; boxGuyCounter = boxGuyCounter >= 5 ? 0 : ++boxGuyCounter;
;
	lda     _boxGuyCounter
	cmp     #$05
	bcc     L00B8
	lda     #$00
	jmp     L00B9
L00B8:	inc     _boxGuyCounter
	lda     _boxGuyCounter
L00B9:	sta     _boxGuyCounter
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ test_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_test_collision: near

.segment	"CODE"

;
; collision = check_collision(&BoxGuy1, &BoxGuy2);
;
	lda     #<(_BoxGuy1)
	ldx     #>(_BoxGuy1)
	jsr     pushax
	lda     #<(_BoxGuy2)
	ldx     #>(_BoxGuy2)
	jsr     _check_collision
	sta     _collision
;
; if (collision) {
;
	lda     _collision
	beq     L00BA
;
; pal_col(0, 0x30);
;
	lda     #$00
	jsr     pusha
	lda     #$30
	jmp     _pal_col
;
; pal_col(0, 0x00);
;
L00BA:	jsr     pusha
	jmp     _pal_col

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(palette_bg);
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; vram_adr(NTADR_A(7, 14)); // set a start position for the text
;
	ldx     #$21
	lda     #$C7
	jsr     _vram_adr
;
; vram_write(text, sizeof(text));
;
	lda     #<(_text)
	ldx     #>(_text)
	jsr     pushax
	ldx     #$00
	lda     #$12
	jsr     _vram_write
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
L006F:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; movement();
;
	jsr     _movement
;
; test_collision();
;
	jsr     _test_collision
;
; draw_sprites();
;
	jsr     _draw_sprites
;
; while (1) {
;
	jmp     L006F

.endproc

