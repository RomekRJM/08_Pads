;
; File generated by cc65 v 2.19 - Git c3d7a90
;
	.fopt		compiler,"cc65 v 2.19 - Git c3d7a90"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.export		__pow
	.export		__fact
	.export		_sin
	.export		_cos

; ---------------------------------------------------------------
; int __near__ _pow (int a, int b)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	__pow: near

.segment	"CODE"

;
; int _pow(int a, int b) {
;
	jsr     pushax
;
; int c = 1;
;
	jsr     decsp2
	lda     #$01
	jsr     pusha0
;
; for (i = 0; i < b; i++)
;
	ldy     #$02
	lda     #$00
	sta     (sp),y
	iny
	sta     (sp),y
L0002:	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$04
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bvc     L0006
	eor     #$80
L0006:	bpl     L0003
;
; c *= a;
;
	jsr     pushw0sp
	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosmulax
	jsr     stax0sp
;
; for (i = 0; i < b; i++)
;
	ldy     #$02
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	jmp     L0002
;
; return c;
;
L0003:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
;
; }
;
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; int __near__ _fact (int x)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	__fact: near

.segment	"CODE"

;
; int _fact(int x) {
;
	jsr     pushax
;
; int ret = 1;
;
	jsr     decsp2
	lda     #$01
	jsr     pusha0
;
; for (i = 1; i <= x; i++)
;
	ldy     #$02
	sta     (sp),y
	lda     #$00
	iny
	sta     (sp),y
L0002:	ldy     #$05
	jsr     pushwysp
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosicmp
	beq     L0006
	bpl     L0003
;
; ret *= i;
;
L0006:	jsr     pushw0sp
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosmulax
	jsr     stax0sp
;
; for (i = 1; i <= x; i++)
;
	ldy     #$02
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	jmp     L0002
;
; return ret;
;
L0003:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
;
; }
;
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; int __near__ sin (int x)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_sin: near

.segment	"CODE"

;
; int sin(int x) {
;
	jsr     pushax
;
; return x - (x * x * x) / 6;
;
	jsr     pushw0sp
	ldy     #$05
	jsr     pushwysp
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosmulax
	jsr     pushax
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosmulax
	jsr     pushax
	lda     #$06
	jsr     tosdiva0
	jsr     tossubax
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; int __near__ cos (int x)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cos: near

.segment	"CODE"

;
; int cos(int x) {
;
	jsr     pushax
;
; return 1 - (x*x) / 2;
;
	lda     #$01
	jsr     pusha0
	ldy     #$05
	jsr     pushwysp
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosmulax
	cpx     #$00
	bpl     L0002
	sta     regsave
	stx     regsave+1
	cpx     #$FF
	bne     L0004
	cmp     #$FF
L0004:	jsr     boolult
	lsr     a
	lda     regsave
	ldx     regsave+1
	bcs     L0002
	ldx     #$00
	txa
	jmp     L0003
L0002:	jsr     asrax1
L0003:	jsr     tossubax
;
; }
;
	jmp     incsp2

.endproc

